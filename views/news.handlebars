<h1>Getting the News</h1>
<ul>
    <li>
        <h4> Makings the get request </h4>
        <p>In order to make get request we need a game. The get request needs an APPId
            that can found in the steamdb.
            <a href=https://steamdb.info/stats/gameratings/>Here</a> is a list of the top 100 games. Once we have the APPID we passed
            it in a GET request like this <strong> http://api.steampowered.com/ISteamNews/GetNewsForApp/v0003/?appid=440&count=3&maxlength=300&format=json</strong>,
            substituting in your APPID
        </p>
    </li>
    <li>
        <h4> Displaying the data</h4>
        <p>Once we make our request we are returned with a JSON file. Unless you are
            a robot, it is going to be hard to read straight JSON. Thankfully we
            can use the JSON.parse() in order to save the data as an object. From
            here we can manipulate the properties to display the data in a more
            readable format.
        </p>
    </li>
    <li>
        <h4> Formatting the data</h4>
        <p>By accessing the elements and using some for loops we can add some formatting
            to our JSON object.
        </p>
        <p>Try the form below. Using some handlebars logic, it sets each header to
            be a title and its content to be the article
            <div>
                <form method="POST">
                    <fieldset>
                        <label>Enter an AppID
                            <input type="text" name="newsappID" size="30" maxlength=10></input>
                        </label>
                        <input type="submit" name="newsSubmit" value="Submit">
                    </fieldset>
                </form>

            </div>
            <br>
            <div id=JSON-DATA>
                {{#if items}}
                <ul>
                    {{#each items}}
                    <li>
                        <h5>{{title}}</h5>
                        <p>{{{contents}}}</p>
                    </li>
                    {{/each}}
                </ul>
                {{/if}}
            </div>
    </li>
    <li>
<iframe
  style="width: 100%; height: 300px"
  src="https://jsfiddle.net/funkydel/d8pc1p2n/embedded/">
</iframe>
<p> This is the server side code for the post request made by this web page. The first lines should be familiar as it sets up some variables such as the
    the api url. Look at how the appid is set. It first looks for the request body to see if the user passed a new appid to look up, otherwise it does
    the same request again. Further down, in the callback function, we set context.news to be the JSON object that was returned. The server then searchs
    for the game articles and stores them in a new array. This is then used to dynamically generate the html on this page using handlebars. Neat!
    </p>
</li>
</ul>
<a href="/steamid">next</a>
